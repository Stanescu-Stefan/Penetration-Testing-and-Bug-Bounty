Optimizing Burp Suite and ZAP for Hunting Business Logic Access Control (BAC) Vulnerabilities
Hunting for Business Logic Access Control (BAC) vulnerabilities requires a methodical approach and powerful tools. Burp Suite and OWASP ZAP (Zed Attack Proxy) are two widely used penetration testing platforms that, when configured properly, provide robust capabilities for identifying these critical vulnerabilities. Below, we outline how to set up these tools effectively to uncover BAC flaws.

Understanding BAC Vulnerabilities
BAC vulnerabilities occur when an application fails to enforce proper restrictions on user actions based on their roles or privileges. Examples include:

Unauthorized access to administrative features.
Escalation of privileges.
Manipulating workflows to bypass intended restrictions.
Unlike typical technical vulnerabilities, BAC flaws require human intuition and testing based on a deep understanding of the application’s business logic.

Setting Up Burp Suite for BAC Hunting
Step 1: Installing Burp Suite
Download Burp Suite Community or Professional from PortSwigger.
Install Java if necessary, as Burp Suite relies on it for execution.
Step 2: Configure the Proxy
Navigate to Proxy > Options and configure the listener to match your browser.
Set your browser’s proxy settings to route traffic through Burp’s proxy (default: 127.0.0.1:8080).
Step 3: Map the Application
Use Proxy > Intercept to capture initial application requests.
Analyze the application structure using Target > Site Map.
Step 4: Enable Extensions
Install extensions from the BApp Store to enhance your BAC testing. Recommended extensions include:
AuthMatrix: Tests role-based access controls.
Logger++: Tracks user actions and requests in real-time.
AutoRepeater: Automates repetitive request testing.
Step 5: Craft Custom Requests
Use the Repeater tool to modify and resend requests.
Change user IDs, roles, and parameters to simulate unauthorized actions.
Step 6: Use Intruder for Automation
Configure Intruder to test roles or users systematically. For example:
Payload 1: List of roles or user IDs.
Payload 2: Endpoints or actions.
Step 7: Analyze Responses
Focus on HTTP status codes (e.g., 200 OK, 403 Forbidden) and response content.
Identify patterns where unauthorized actions are allowed.
Setting Up OWASP ZAP for BAC Hunting
Step 1: Installing OWASP ZAP
Download ZAP from OWASP’s official website.
Install and set it up with default settings.
Step 2: Configure the Proxy
Open Tools > Options > Local Proxy to configure the listening port (default: 8080).
Route your browser traffic through ZAP’s proxy.
Step 3: Explore the Application
Use Spider or Crawler to map the application.
Manually browse the application while ZAP captures requests and builds its site map.
Step 4: Leverage Contexts
Define contexts under Context > Include in Context.
Assign users or roles to the context to simulate specific privilege levels.
Step 5: Use Forced Browsing
Utilize the Forced Browse add-on to test endpoints for unauthorized access.
Customize payloads to include sensitive URLs, such as admin panels or restricted actions.
Step 6: Modify Requests
Use the Manual Request Editor to manipulate requests.
Change session tokens, roles, or input parameters to simulate privilege escalation or unauthorized actions.
Step 7: Automated Testing
ZAP's Fuzzer allows systematic testing of parameters or endpoints.
Use customized payloads (e.g., role IDs, user IDs) for testing BAC.
Step 8: Analyze Responses
Pay attention to discrepancies in HTTP response codes or body content when accessing resources as different roles.
Optimizing Workflow for BAC Hunting
User Role Enumeration

Identify all possible roles and their associated permissions.
Use tools like AuthMatrix (Burp Suite) or ZAP’s Contexts for structured testing.
Session Management Testing

Test session fixation, token reuse, and session termination flaws.
Ensure users cannot access restricted features by tampering with tokens or cookies.
Custom Scripts and Tools

Leverage scripting capabilities:
Burp Suite: Burp Extender with Python or Java.
ZAP: ZAP Scripts in Groovy or JavaScript.
Dynamic Workflows

Use automation tools like Burp Macro or ZAP’s Automation Framework to simulate complex workflows.
Human Intuition

Understand the application’s intended business logic.
Test workflows manually, focusing on potential misuse scenarios.
